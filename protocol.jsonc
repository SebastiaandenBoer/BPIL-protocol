// Results will be filtered based on optional parameters, where applicable.
[
    // Retrieve trucks ordered by geolocation of designated transport company
    {
        "method": "retrieveTrucksByLocation",
        "input": {
            // Requested location in latitude and longitude
            "geoLocation": {
                "latitude": 0.0,
                "longitude": 0.0
            },
            // Kilometers around requested location
            "radius": 5.0,
            // Unique identifier (UUID4) of a transport company (optional)
            "tcID": "xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx",
        },
        "output": [
            // Each object resembles a single truck within the requested
            // radius around the requested geolocation
            {
                // Unique identifier (UUID4) of a truck
                "truckID": "xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx",
                // Unique (UUID4) identifier of a trip
                "tripID": "xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx",
                // Representation of transport company
                "tc": {
                    // Unique identifier (UUID4) of a transport company
                    "ID": "xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx",
                    // Name of a transport company
                    "name": "xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx",
                },
                // Requested location in latitude and longitude
                "geoLocation": {
                    "latitude": 0.0,
                    "longitude": 0.0
                },
            },
            "..."
        ],
    },
    // Assign route for a certain truck 
    // Returns an error if the truck already has a route assigned
    {
        "method": "assignTruckRoute",
        "input": {
            // Transport Company secret key (UUID)
            "key": "xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx",
            // Unique (UUID4) identifier of a truck
            "truckID": "xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx",
            // Destination in latitude and longitude
            "destination": {
                "latitude": 0.0,
                "longitude": 0.0,
            },
        },
        "output": {
            // Unique (UUID4) identifier of a trip
            "tripID": "xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx",
            // UTC timestamp of arrival measurement (UNIX-time)
            "estimatedArrival": 1543238189,
        },
        "error": {
            "code": 500,
            "status": "The truck is already en-route to its destination. Another destination could not be set.",
        },
    },
    // Intermittent request of recent truck geolocation
    {
        "method": "requestTruckLocation",
        "input": {
            // Unique (UUID4) identifier of a truck
            "truckID": "xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx",
        },
        "output": {
            // Requested location in latitude and longitude
            "geoLocation": {
                "latitude": 0.0,
                "longitude": 0.0
            },
            // Representation of transport company
            "tc": {
                // Unique identifier (UUID4) of a transport company
                "ID": "xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx",
                // Name of a transport company
                "name": "Twents van der Kuil",
            },
            // UTC timestamp of location measurement (UNIX-time)
            "dateTime": 1543238189,
            // UTC timestamp of arrival measurement (UNIX-time)
            "estimatedArrival": 1543238189,
        },
    },
    // Estimate loading time for a number of goods of specified
    // weight and dimensions
    {
        "method": "estimateLoadingTime",
        "input": {
            // A list of goods to be (un)loaded
            "goods": [
                {
                    "weight": 2.1, // Weight of the item (kg)
                    "height": 25.0, // Height of the item (dm)
                    "width": 20.0, // Width of the item (dm)
                    "length": 10.0, // Length of the item (dm)
                },
                "..."
            ],
        },
        "output": {
            // Estimated timespan in miliseconds (minutes times 60000)
            "timespan": 19200000
        }
    },
    // Estimate loading staging for a number of goods of specified
    // weight and dimensions
    {
        "method": "estimateStagingTime",
        "input": {
            // A list of goods to be staged
            "goods": [
                {
                    "weight": 2.1, // Weight of the item (kg)
                    "height": 25.0, // Height of the item (dm)
                    "width": 20.0, // Width of the item (dm)
                    "length": 10.0, // Length of the item (dm)
                },
                "..."
            ],
        },
        "output": {
            // Estimated timespan in miliseconds (minutes times 60000)
            "timespan": 19200000
        }
    },
    // Registers a transport company with a certain name
    {
        "method": "registerTransportCompany",
        "input": {
            // Name of the registered transport company
            "name": "Twents van der Kuil",
            // Number of trucks to be registered for this company (max: 25)
            "noTrucks": 25,
        },
        "output": {
            // Transport Company secret key (UUID)
            "key": "xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx",
            // Representation of transport company
            "tc": {
                // Unique identifier (UUID4) of a transport company
                "ID": "xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx",
                // Registered name of the transport company
                "name": "Twents van der Kuil",
            },
            // List of trucks registered for this transport company
            "truckIDs": [
                // Unique (UUID4) identifier of a truck
                "xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx",
                "..."
            ],
        },
    },
]